너비우선탐색 bfs
큐이용 q.push({0,0}); queue<pair <int,int>> Q
커서 프론트 pop 방향잡기 범위체크 이상한데가나체크
다음에갈수잇으면 +1 dist 체크 =1 q push ! 
q가빌떄까지반복


#include <iostream>
#include <vector> 
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <algorithm>
#include <queue>
using namespace std;

int main()
{
    
    string arr[101];
    int dist[101][101];
    bool chk[101][101];
    
    int n,m;
    int dx[4] = {1,-1,0,0};
    int dy[4] = {0,0,1,-1};
    
    queue <pair<int,int>> Q;
    
    
    cin>>n>>m;
    
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    dist[0][0]=1;
    chk[0][0]=1;
    Q.push({0,0});
    
    while(!Q.empty())
    {
        pair <int,int> cur = Q.front();
        Q.pop();
        
        for(int dir=0;dir<4;dir++)
        {
            int nx = cur.first + dx[dir];
            int ny = cur.second + dy[dir];
            if(nx<0||nx>=n||ny<0||ny>=m)
                continue;
            if(arr[nx][ny]=='0'||chk[nx][ny])
                continue;
                
            dist[nx][ny] = dist[cur.first][cur.second]+1;
            Q.push({nx,ny}); chk[nx][ny]=1;
            
        }
    }
    
    
    cout<<dist[n-1][m-1]<<endl;
    
}









----------------------bfs로잘못푼---------------


#include <iostream>
#include <vector> 
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <algorithm>

using namespace std;
#define max 100
int n,m,result;
//int max=100;
int map[max][max],visit[max][max];
int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

void BFS(int x,int y)
{
    
    for(int i=0;i<4;i++)
    {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if(nx<0||nx>=n||ny<0||ny>=m) continue;
        else
            {
                if(visit[nx][ny]==0 && map[nx][ny]==1)
                {
                    visit[nx][ny]=1;
                    result++;
                    if(nx==n-1&&ny==m-1) 
                    {
                        cout<<result<<endl;
                        break;
                    }
                    BFS(nx,ny);
                }
                
            }
    
    }
}

int main()
{
    result=0;
    cin>>n>>m;
    int map[n][m];
    
    for(int i=0;i<n;i++)
    {
        string temp;
        cin>>temp;
        for(int j=0;j<m;j++)map[i][j]=temp[j];
    }
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(visit[i][j]==0 && map[i][j]==1)
                    {
                        visit[i][j]=1;
                        result++;
                        BFS(i,j);
                    }
        }
       
    }
   return 0;
    
}
